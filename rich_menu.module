<?php
/**
 * @file
 * Code for the rich_menu module.
 */


 /**
  * Implements hook_menu().
  */
 function rich_menu_menu() {
  //  $items = array();
   //
  //  // Menu item exists so contextual links will show up, but hidden by default
  //  // since it's simply a page redirect to tiles edit screen.
  //  // @TODO update for use with menu items?
   $items['admin/structure/rich-menu'] = array(
     'title' => 'Add tile to section',
     'page callback' => 'rich_menu_add_tile',
     'access arguments' => array('arrange tiles'),
     'hidden' => TRUE,
   );
   $items['admin/structure/rich-menu/%'] = array(
     'title' => 'Add tile to menu',
     'page callback' => 'rich_menu_add_tile',
     'page arguments' => array(3),
     'type' => MENU_LOCAL_ACTION,
     'context' => MENU_CONTEXT_INLINE,
     'access arguments' => array('arrange tiles'),
   );

   return $items;
 }


/**
 * Implements hook_form_alter().
 * @TODO prevent a menu with children from being saved as a rich menu
 *   ...display message asking to flatten menu first?
 */
function rich_menu_form_alter(&$form, &$form_state, $form_id) {
  // kpr($form);
  switch ($form_id) {
    case 'menu_edit_menu':
      $menu_name = $form['old_name']['#value'];
      $rich_menu_status = rich_menu_get_status($menu_name);

      $form['rich_menu_status'] = array(
        '#type' => 'checkbox',
        '#title' => 'Make Rich Menu',
        '#description' => 'Check to create expandable menu capable of holding tiles.',
        '#default_value' => $rich_menu_status,
      );

      $form['#submit'][] = 'rich_menu_form_submit';

    break;

    case 'menu_edit_item':
      $menu_name = $form['original_item']['#value']['menu_name'];
      $rich_menu_status = rich_menu_get_status($menu_name);
      // Hide parent select list to prevent children
      if (!empty($rich_menu_status)) {
        // Hide parent select list to prevent children
        // @TODO Also hide rich menus from parent select lists on other menu link edit item pages
        $form['parent']['#access'] = FALSE;
        // Hide expanded checkbox
        $form['expanded']['#access'] = FALSE;

      }

    break;

    case 'menu_overview_form':
      $menu_name = $form['#menu']['menu_name'];
      $rich_menu_status = rich_menu_get_status($menu_name);

      // Hide parent select list to prevent children
      if (!empty($rich_menu_status)) {
        // add validation
        $form['#validate'][] = 'rich_menu_form_validate';
      }

      // kpr($form_state);
      // die;

    break;

  }
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function rich_menu_form_menu_edit_item_alter(&$form, $form_state) {
  $menu_name = $form['original_item']['#value']['menu_name'];
  $rich_menu_status = rich_menu_get_status($menu_name);

  if (!empty($rich_menu_status)) {
    $item = $form['original_item']['#value'];
    _rich_menu_menu_alter($form, $item);
  }
}

/**
 * Alters menu item form to include additional rich menu options.
 *
 * Provides the ability to disable rich_menu for rich menu items.
 */
function _rich_menu_menu_alter(&$form, $item) {
  $form['options']['#tree'] = TRUE;
  $form['options']['#weight'] = 50;

  // Unset the previous value so that the new values get saved.
  unset($form['options']['#value']['attributes']);
  unset($form['options']['#value']['rich_menu']);

  $form['options']['rich_menu'] = array(
    '#type' => 'fieldset',
    '#title' => t('Rich Menu Settings.'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#tree' => TRUE,
  );

  $form['options']['rich_menu']['disable_rich_menu'] = array(
    '#type' => 'checkbox',
    '#title' => t('Disable Rich Menu?'),
    '#description' => t('Check to disable rich menu on this menu item.'),
    '#default_value' => isset($item['options']['rich_menu']['disable_rich_menu']) ? $item['options']['rich_menu']['disable_rich_menu'] : 0,
  );

  $form['options']['rich_menu']['column'] = array(
    '#type' => 'select',
    '#title' => t('Number of columns'),
    '#options' => array(
      1 => t('1'),
      2 => t('2'),
      3 => t('3'),
    ),
    '#description' => t('3 columns is full width of the page.'),
    '#default_value' => isset($item['options']['rich_menu']['column']) ? $item['options']['rich_menu']['column'] : 1,
  );

  // Add form values for the reset of $item['options'] and
  // $item['options']['attributes'] so the values will carry over during save.
  foreach ($item['options'] as $key => $value) {
    if ($key !== 'attributes' && !isset($form['options'][$key])) {
      $form['options'][$key] = array(
        '#type' => 'value',
        '#value' => $value,
      );
    }
  }

  if (isset($item['options']['rich_menu'])) {
    foreach ($item['options']['rich_menu'] as $key => $value) {
      if (!isset($form['options']['rich_menu'][$key])) {
        $form['options']['rich_menu'][$key] = array(
          '#type' => 'value',
          '#value' => $value,
        );
      }
    }
  }
}




/**
 * Validation handler for menu overview form
 */
function rich_menu_form_validate($form, &$form_state) {
  // @TODO Needs a bit more work...
  $menu_items = array();
  foreach ($form_state['values'] as $key => $value) {
    $pos = strpos($key, 'mlid:');
    if ($pos !== FALSE) {
      $menu_items[] = $form_state['values'][$key];
    }
  }

  // Iterate through all form items
  $error_count = 0;
  foreach ($menu_items as $item) {
    if($item['plid'] != '0') {
      $error_count++;
    }
    //kpr($item);
  }

  if ($error_count > 0) {
    form_set_error($name = '#menu', 'A rich menu cannot have nested children, please adjust the menu settings and try again.');
  }

}


/**
 * Submit handler for menu edit form
 */
function rich_menu_form_submit($form, &$form_state) {
  $rich_menu_status = $form_state['values']['rich_menu_status'];
  $menu_name = $form_state['values']['menu_name'];
  // @TODO - should I check to see if menu_name changed?

  // Check for an existing record
  $rich_menu_exists = db_query("SELECT menu_name from {rich_menu} WHERE menu_name = :name", array(
    ':name' => $menu_name,
  ))->fetch();

  // If rich_menu exists update the record
  if (!empty($rich_menu_exists->menu_name)) {
    // Add value to database
    db_update('rich_menu')
      ->fields(array(
      'status' => $rich_menu_status,
      ))
      ->condition('menu_name', $menu_name)
      ->execute();
  } else {
    // Add value to database
    db_insert('rich_menu')
      ->fields(array(
      'menu_name' => $menu_name,
      'status' => $rich_menu_status,
      ))
      ->execute();
  }
}


/**
 * Implements hook_block_info()
 */
function rich_menu_block_info() {
  // Get all rich menus
  $rich_menus = rich_menu_get_rich_menus();
  $blocks = array();
  if (!empty($rich_menus)) {
    foreach($rich_menus as $menu) {
      $menu_name = $menu['menu_name'];

      $blocks['rich-menu-' . $menu_name] = array(
        'info' => 'Rich menu '. $menu_name,
        'cache' => DRUPAL_CACHE_GLOBAL,
      );
    }
  }

  return $blocks;
  // Foreach rich menu create block
}

/**
 * Implements hook_block_view()
 */
function rich_menu_block_view($delta = '') {
  // Get all rich menus
  $rich_menus = rich_menu_get_rich_menus();
  $block = array();

  if (!empty($rich_menus)) {
    foreach($rich_menus as $menu) {
      $menu_name = $menu['menu_name'];
      switch ($delta) {
        case 'rich-menu-' .$menu_name:
          $block['subject'] = '';
          $block['content'] = rich_menu_block_render($menu_name);
        break;
      }
    }
  }

  return $block;
}


/**
 * Helper function to get rich menu status
 * @param string $menu_name - machine name of menu
 * @return bool - true if rich menu
 */
function rich_menu_get_status($menu_name) {
  $rich_menu = db_query("SELECT status from {rich_menu} WHERE menu_name = :name", array(
    ':name' => $menu_name,
  ))->fetch();
  if (!empty($rich_menu->status)) {
    return TRUE;
  }

  return FALSE;

}

/**
 * Helper function to get all active rich menus
 */
function rich_menu_get_rich_menus() {
  $rich_menus = db_query("SELECT menu_name from {rich_menu} WHERE status = 1")->fetchAll(PDO::FETCH_ASSOC);
  return $rich_menus;

}

/**
 * Implements hook_tiles_container_info().
 */
function rich_menu_tiles_container_info() {
  return array(
    // @TODO bring add class after errors are fixed.
    'rich_menu' => 'TilesRichMenuContainer',
  );
}


/**
 * Implements hook_theme().
 */
function rich_menu_theme($existing, $type, $theme, $path) {
  return array(
    'rich_menu_item' => array(
      // Need to use element as the variable in order to attach contextual links
      // properly, since contextual_preprocess() expects a #contextual_links key
      // on the first variable in the calling theme.
      'variables' => array('element' => NULL, 'tiles' => NULL, 'col' => NULL),
      'template' => 'rich-menu-item',
    ),
    'rich_menu' => array(
      'variables' => array('items' => array()),
      'template' => 'rich-menu',
    ),
  );
}


/**
 * Preprocess function for rich-menu_item.tpl.php.
 */
function template_preprocess_rich_menu_item(&$variables) {
  $item = $variables['element']['item'];
  $col = $variables['element']['column'];
  $selector = $item['link']['mlid'];
  $variables['selector'] = $selector;

  $build = array('content' => array());

  // Load up any blocks that have been added to this section through tiles.
  $container = tiles_get_container('rich_menu');
  $layout = $container->getLayout($selector);
  $container->buildPage($build, $layout);

  // Get tiles width for each block.
  foreach (element_children($build['content']) as $block_key) {
    // Only set the width of the block if it is not already set.
    if (isset($tiles[$block_key]['#block']->width)) {
      $block = $tiles[$block_key]['#block'];
      $tiles[$block_key]['#block']->width = tiles_get_width($block->module, $block->delta);
    }
  }

  $container->wrapRegion($build['content']);

  $variables['tiles'] = $build['content'];
  $variables['col'] = $col;
}


/**
 * Callback function to render rich menu blocks
 */
function rich_menu_block_render($menu_name) {
  $items = array();

  // Get menu children
  $menu_children = menu_build_tree($menu_name, array(
    'max_depth' => 1,
    'conditions' => array(
      'hidden' => 0,
    ),
  ));
  if (!empty($menu_children)){
    foreach ($menu_children as $child) {

      $item = array(
        'item' => $child,
      );

      if (empty($child['link']['options']['rich_menu']['disable_rich_menu'])) {
        $column = 3;
        if (!empty($child['link']['options']['rich_menu']['column'])) {
          $column = $child['link']['options']['rich_menu']['column'];
        }
        $item['layout'] = array(
          '#theme' => 'rich_menu_item',
          '#element' => array(
            'item' => $child,
            'column' => $column,
            '#contextual_links' => array(
              'rich_menu' => array('admin/structure/rich-menu', array($child['link']['mlid'])),
            ),
          ),
        );
      }
      else {
        $item['layout'] = array();
      }

      $items[] = $item;
    }
  }

  $build = array(
    '#theme' => 'rich_menu',
    '#items' => $items,
    '#menu_name' => $menu_name,
  );

  return $build;


}



/**
 * Page callback.
 *
 * Redirects user to appropriate tiles add block screen.
 * @TODO update for rich_menu
 */
function rich_menu_add_tile($mlid) {
  $selector = $mlid;

  // Keep user in overlay.
  $url = 'admin/tiles/add/rich_menu/' . $selector;
  if (module_exists('overlay') && overlay_get_mode() == 'child') {
    // Fix Safari bug that improperly redirects destination if destination is
    // the front page (e.g. node/1 will be redirected to / but loose overlay
    // context).
    if ($_GET['destination'] == variable_get('site_frontpage', '')) {
      $_GET['destination'] = '<front>';
    }
    overlay_close_dialog($_GET['destination'], array(
      'fragment' => 'overlay=' . urlencode($url . '?destination=' . $_GET['destination']),
      'absolute' => TRUE,
    ));
  }
  else {
    drupal_goto($url, array('query' => array('destination' => $_GET['destination'])));
  }
}
